//all imported libraries
const { default: axios } = require("axios");
const {
    GraphQLObjectType,
    GraphQLString,
    GraphQLInt,
    GraphQLSchema,
    GraphQLList,
    GraphQLNonNull,
    GraphQLID
} = require("graphql");

//Type declarations
const TeamType = new GraphQLObjectType({
    name: "Team",
    description: "Contains data of all Heckler teams under inspection.",
    fields: () => ({
        id: {type: new GraphQLNonNull(GraphQLID)},
        teamname: {type: new GraphQLNonNull(GraphQLString)},
        size: {type: new GraphQLNonNull(GraphQLInt)},
        members: {
            type: new GraphQLList(UserType),
            resolve(parentValue, args){
                return axios.get("http://localhost:3000/names/?teamid=" + parentValue.id)
                .then(res => res.data);
            }
        }

    })
});

const UserType = new GraphQLObjectType({
    name: "User",
    description:"Contains data of all Hecklers under inspection.",
    fields: () => ({
        id: {type: new GraphQLNonNull(GraphQLString)},
        username: {type: new GraphQLNonNull(GraphQLString)},
        age: {type: new GraphQLNonNull(GraphQLInt)},
        teamid: {type: new GraphQLNonNull(GraphQLString)},
        partOfTeam: {
            type: TeamType,
            resolve(parentValue, args){
                return axios.get("http://localhost:3000/teams/" + parentValue.teamid)
                .then(res => res.data);
            }
        }
    })
});

//root query definition
const RootQuery = new GraphQLObjectType({
    name: "RootQueryType",
    fields:{
        team:{
            type:TeamType,
            args: {
                id:{type:GraphQLString}
            },
            resolve(parentValue, args){
                return axios.get("http://localhost:3000/teams/" + args.id)
                .then(res => res.data)
            }
        },
        teams:{
            type: new GraphQLList(TeamType),
            resolve(parentValue, args){
                return axios.get("http://localhost:3000/teams/")
                .then(res => res.data)
            }
        },
        name:{
            type:UserType,
            args:{
                id:{type:GraphQLString},
            },
            resolve(parentValue,args){
                return axios.get("http://localhost:3000/names/" + args.id)
                .then(res => res.data)
            }
        },
        names:{
            type: new GraphQLList(UserType),
            resolve(parentValue,args){
                return axios.get("http://localhost:3000/names/")
                .then(res => res.data)
            }
        }
    }
});
 //declaring root query
module.exports = new GraphQLSchema({
    query: RootQuery
});
